module perf;

import io.Printer;

every Md5Performance is:

	needs Printer;

	run() {
		for(var i = 1; i < 100000; i += 1) {
			var Num[] = hash((i << (i % 16) * 24200022).toText());
			//Printer.printLine(Num[0].toText() + ' ' + Num[1].toText() + ' ' + Num[2].toText() + ' ' + Num[3].toText());
		}
	}

	Num[] -- hash(Text rawInput) {
		var input = textToI32s(rawInput);
		var inputlen = rawInput.getSize() * 8;
		var s = [
			7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
			5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
			4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
			6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
		];

		var k = [
			0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
			0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
			0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
			0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
			0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
			0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
			0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
			0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
			0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
			0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
			0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
			0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
			0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
			0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
			0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
			0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
		];

		//Initialize variables:
		var Num = 0x67452301; //A
		var $Num = 0xefcdab89; //B
		var $$Num = 0x98badcfe; //C
		var $$$Num = 0x10325476; //D

		//Pre-processing: adding a single 1 bit
		// %%% is fastest, implementation defined modulo. Only has strange effects with negatives which aren't here
		var byteoffset = input.getSize() % 4;
		if byteoffset == 0 {
			// then we have to make a new i32 in our input string
			input.push(1 << 31);
		} else {
			// flip on the 7th, 15th, or 23rd bit byteoffset values 1, 2, or 3
			input[input.getSize() - 1] += 1 << ((byteoffset * 4) - 1);
		}

		//Pre-processing: padding with zeros. Ensure we have chunks of 512 bits, minus 64 bits for the length
		while (input.getSize() %%% 16) != 14 {
			input.push(0);
		}

		//Pre-processing: add raw message length mod 2.toThe(64)
		input.push(0); // @TODO handle cases where input len > 2.toThe(32)
		input.push(rawInput.getSize());

		//Process the message in successive 512-bit chunks:
		for(var chunk = 0; chunk < input.getSize(); chunk += 16) {
			//Initialize hash value for this chunk:
			var a = Num;
			var b = $Num;
			var c = $$Num;
			var d = $$$Num;

			//Main loop:
			for(var i = 0; i < 64; i += 1) {
				var f = 0;
				var g = 0;
				if i < 16 {
					f = (b & c) | ((~b) & d);
					g = i;
				} else if i < 32 {
					f = (d & b) | ((~d) & c);
					g = (i * 5 + 1) %%% 16;
				} else if i < 48 {
					f = b ^ c & d;
					g = (i * 3 + 5) %%% 16;
				} else {
					f = c ^ (b | (~d));
					g = (i * 7) %%% 16;
				}

				var dTemp = d;
				d = c;
				c = b;
				b = b + leftrotate((a + f + k[i] + input[chunk + g]), s[i]);
				a = dTemp;
			}

			//Add this chunk's hash to result so far:
			Num += a;
			$Num += b;
			$$Num += c;
			$$$Num += c;
		}

		return [Num, $Num, $$Num, $$$Num];
	}

	Num[] -- textToI32s(Text) {
		var offset = 0;
		var index = 0;
		var Num[] = [0];
		foreach Text.toCharArray() {
			if offset == 32 {
				offset = 0;
				index += 1;
				Num[index] = Char.toAsciiCode() << (24);
			} else {
				Num[index] += Char.toAsciiCode() << (24 - offset);
			}

			offset += 8;
		}

		return Num[];
	}

	Num -- leftrotate(Num, $Num) {
		return (Num << $Num) | (Num >> (32 - $Num));
	}
